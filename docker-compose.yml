version: '3.8'

services:
  # PostgreSQL Database Service
  db:
    image: postgres:13
    restart: always
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432" # Map container port 5432 to host port 5432

  # Python Application Service (for scraping, dbt, FastAPI - where scraper.py will run)
  app:
    build: . # Build from the Dockerfile in the current directory
    restart: on-failure
    depends_on:
      - db # Ensure database is up before starting the app
    environment:
      # Pass secrets from .env to the container
      TELEGRAM_API_ID: ${TELEGRAM_API_ID}
      TELEGRAM_API_HASH: ${TELEGRAM_API_HASH}
      TELEGRAM_PHONE_NUMBER: ${TELEGRAM_PHONE_NUMBER}
      POSTGRES_HOST: db # Use the service name 'db' for inter-container communication
      POSTGRES_PORT: 5432
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      BASE_RAW_DATA_DIR: /app/data/raw # <-- IMPORTANT: Define base directory for raw data
    volumes:
      - .:/app # Mount the entire current project directory into the container. This means:
                # - src/ and dbt/ are available
                # - local data/raw will map to /app/data/raw inside container
      - telegram_session:/app/telegram_session # Volume for Telethon session file persistence
      # - raw_data_volume:/app/data/raw # This line is technically redundant IF your data/raw is directly inside .:/app, but explicitly defining it here as raw_data_volume
                                     # is good for clarity that this specific path is a volume.
                                     # Let's use the explicit volume for robustness even if redundant with bind mount.
    tty: true # Keep the container running in the foreground, useful for exec
    stdin_open: true # Allow interactive input (for Telegram login code)

  # Dagster Webserver and Daemon Service
  dagster:
    build: . # Use the same app image for Dagster
    restart: on-failure
    depends_on:
      - db
      - app # Depends on app to access dbt and other scripts within the /app volume
    environment:
      # Pass secrets to Dagster as well
      TELEGRAM_API_ID: ${TELEGRAM_API_ID}
      TELEGRAM_API_HASH: ${TELEGRAM_API_HASH}
      TELEGRAM_PHONE_NUMBER: ${TELEGRAM_PHONE_NUMBER}
      POSTGRES_HOST: db
      POSTGRES_PORT: 5432
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      BASE_RAW_DATA_DIR: /app/data/raw # <-- IMPORTANT: Also define for Dagster
      DAGSTER_HOME: /opt/dagster/dagster_home # Where Dagster stores its metadata
    volumes:
      - .:/app # Mount project code
      - telegram_session:/app/telegram_session # Session persistence
      - raw_data_volume:/app/data/raw # Raw data access
      - dagster_home:/opt/dagster/dagster_home # Persistent storage for Dagster metadata
    ports:
      - "3000:3000" # Dagit UI
    command: dagster-webserver -h 0.0.0.0 -p 3000

volumes:
  postgres_data: # Persistent volume for PostgreSQL data
  telegram_session: # Persistent volume for Telethon session
  raw_data_volume: # Explicitly named persistent volume for raw data lake
  dagster_home: # Persistent volume for Dagster metadata